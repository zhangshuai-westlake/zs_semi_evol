task_id,question,answer,test_list,test_setup_code,challenge_test_list
929,Write a function to count repeated items of a tuple.,"def count_tuplex(tuplex,value):  
  count = tuplex.count(value)
  return count","[""assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3"", ""assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2"", ""assert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4""]",,[]
603,Write a function to get a lucid number smaller than or equal to n.,"def get_ludic(n):
	ludics = []
	for i in range(1, n + 1):
		ludics.append(i)
	index = 1
	while(index != len(ludics)):
		first_ludic = ludics[index]
		remove_index = index + first_ludic
		while(remove_index < len(ludics)):
			ludics.remove(ludics[remove_index])
			remove_index = remove_index + first_ludic - 1
		index += 1
	return ludics","[""assert get_ludic(10) == [1, 2, 3, 5, 7]"", ""assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]"", ""assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]""]",,[]
851,Write a python function to find sum of inverse of divisors.,"def Sum_of_Inverse_Divisors(N,Sum): 
    ans = float(Sum)*1.0 /float(N);  
    return round(ans,2); ","[""assert Sum_of_Inverse_Divisors(6,12) == 2"", ""assert Sum_of_Inverse_Divisors(9,13) == 1.44"", ""assert Sum_of_Inverse_Divisors(1,4) == 4""]",,[]
857,Write a function to list out the list of given strings individually using map function.,"def listify_list(list1):
  result = list(map(list,list1)) 
  return result ","[""assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]"", ""assert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]"", ""assert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]""]",,[]
697,Write a function to find number of even elements in the given list using lambda function.,"def count_even(array_nums):
   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))
   return count_even","[""assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3"", ""assert count_even([10,15,14,13,-18,12,-20])==5"", ""assert count_even([1, 2, 4, 8, 9])==3""]",,[]
937,Write a function to count the most common character in a given string.,"from collections import Counter 
def max_char(str1):
    temp = Counter(str1) 
    max_char = max(temp, key = temp.get)
    return max_char","[""assert max_char(\""hello world\"")==('l')"", ""assert max_char(\""hello \"")==('l')"", ""assert max_char(\""python pr\"")==('p')""]",,[]
662,Write a function to sort a list in a dictionary.,"def sorted_dict(dict1):
  sorted_dict = {x: sorted(y) for x, y in dict1.items()}
  return sorted_dict","[""assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}"", ""assert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}"", ""assert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}""]",,[]
646,Write a python function to count number of cubes of size k in a cube of size n.,"def No_of_cubes(N,K):
    No = 0
    No = (N - K + 1)
    No = pow(No, 3)
    return No","[""assert No_of_cubes(2,1) == 8"", ""assert No_of_cubes(5,2) == 64"", ""assert No_of_cubes(1,1) == 1""]",,[]
601,Write a function to find the longest chain which can be formed from the given set of pairs.,"class Pair(object): 
	def __init__(self, a, b): 
		self.a = a 
		self.b = b 
def max_chain_length(arr, n): 
	max = 0
	mcl = [1 for i in range(n)] 
	for i in range(1, n): 
		for j in range(0, i): 
			if (arr[i].a > arr[j].b and
				mcl[i] < mcl[j] + 1): 
				mcl[i] = mcl[j] + 1
	for i in range(n): 
		if (max < mcl[i]): 
			max = mcl[i] 
	return max","[""assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3"", ""assert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4"", ""assert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5""]",,[]
908,Write a function to find the fixed point in the given array.,"def find_fixed_point(arr, n): 
	for i in range(n): 
		if arr[i] is i: 
			return i 
	return -1","[""assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3"", ""assert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1"", ""assert find_fixed_point([0, 2, 5, 8, 17],5) == 0""]",,[]
829,Write a function to find out the second most repeated (or frequent) string in the given sequence.,"from collections import Counter 
	
def second_frequent(input): 
	dict = Counter(input) 
	value = sorted(dict.values(), reverse=True)  
	second_large = value[1] 
	for (key, val) in dict.items(): 
		if val == second_large: 
			return (key) ","[""assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'"", ""assert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'"", ""assert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'""]",,[]
772,Write a function to remove all the words with k length in the given string.,"def remove_length(test_str, K):
  temp = test_str.split()
  res = [ele for ele in temp if len(ele) != K]
  res = ' '.join(res)
  return (res) ","[""assert remove_length('The person is most value tet', 3) == 'person is most value'"", ""assert remove_length('If you told me about this ok', 4) == 'If you me about ok'"", ""assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'""]",,[]
835,Write a python function to find the slope of a line.,"def slope(x1,y1,x2,y2): 
    return (float)(y2-y1)/(x2-x1)  ","[""assert slope(4,2,2,5) == -1.5"", ""assert slope(2,4,4,6) == 1"", ""assert slope(1,2,4,2) == 0""]",,[]
953,Write a python function to find the minimun number of subsets with distinct elements.,"def subset(ar, n): 
    res = 0
    ar.sort() 
    for i in range(0, n) : 
        count = 1
        for i in range(n - 1): 
            if ar[i] == ar[i + 1]: 
                count+=1
            else: 
                break 
        res = max(res, count)  
    return res ","[""assert subset([1, 2, 3, 4],4) == 1"", ""assert subset([5, 6, 9, 3, 4, 3, 4],7) == 2"", ""assert subset([1, 2, 3 ],3) == 1""]",,[]
890,Write a python function to find the index of an extra element present in one sorted array.,"def find_Extra(arr1,arr2,n) : 
    for i in range(0, n) : 
        if (arr1[i] != arr2[i]) : 
            return i 
    return n ","[""assert find_Extra([1,2,3,4],[1,2,3],3) == 3"", ""assert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4"", ""assert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5""]",,[]
839,Write a function to sort the tuples alphabetically by the first item of each tuple.,"def sort_tuple(tup): 
	n = len(tup) 
	for i in range(n): 
		for j in range(n-i-1): 
			if tup[j][0] > tup[j + 1][0]: 
				tup[j], tup[j + 1] = tup[j + 1], tup[j] 
	return tup","[""assert sort_tuple([(\""Amana\"", 28), (\""Zenat\"", 30), (\""Abhishek\"", 29),(\""Nikhil\"", 21), (\""B\"", \""C\"")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]"", ""assert sort_tuple([(\""aaaa\"", 28), (\""aa\"", 30), (\""bab\"", 29), (\""bb\"", 21), (\""csa\"", \""C\"")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]"", ""assert sort_tuple([(\""Sarala\"", 28), (\""Ayesha\"", 30), (\""Suman\"", 29),(\""Sai\"", 21), (\""G\"", \""H\"")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]""]",,[]
716,Write a function to find the perimeter of a rombus.,"def rombus_perimeter(a):
  perimeter=4*a
  return perimeter","[""assert rombus_perimeter(10)==40"", ""assert rombus_perimeter(5)==20"", ""assert rombus_perimeter(4)==16""]",,[]
903,Write a python function to count the total unset bits from 1 to n.,"def count_Unset_Bits(n) :  
    cnt = 0;  
    for i in range(1,n + 1) : 
        temp = i;  
        while (temp) :  
            if (temp % 2 == 0) : 
                cnt += 1;  
            temp = temp // 2;  
    return cnt;  ","[""assert count_Unset_Bits(2) == 1"", ""assert count_Unset_Bits(5) == 4"", ""assert count_Unset_Bits(14) == 17""]",,[]
866,Write a function to check whether the given month name contains 31 days or not.,"def check_monthnumb(monthname2):
  if(monthname2==""January"" or monthname2==""March""or monthname2==""May"" or monthname2==""July"" or monthname2==""Augest"" or monthname2==""October"" or monthname2==""December""):
    return True
  else:
    return False","[""assert check_monthnumb(\""February\"")==False"", ""assert check_monthnumb(\""January\"")==True"", ""assert check_monthnumb(\""March\"")==True""]",,[]
924,Write a function to find maximum of two numbers.,"def max_of_two( x, y ):
    if x > y:
        return x
    return y","[""assert max_of_two(10,20)==20"", ""assert max_of_two(19,15)==19"", ""assert max_of_two(-10,-20)==-10""]",,[]
741,Write a python function to check whether all the characters are same or not.,"def all_Characters_Same(s) :
    n = len(s)
    for i in range(1,n) :
        if s[i] != s[0] :
            return False
    return True","[""assert all_Characters_Same(\""python\"") == False"", ""assert all_Characters_Same(\""aaa\"") == True"", ""assert all_Characters_Same(\""data\"") == False""]",,[]
889,Write a function to reverse each list in a given list of lists.,"def reverse_list_lists(lists):
    for l in lists:
        l.sort(reverse = True)
    return lists ","[""assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]"", ""assert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]"", ""assert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]""]",,[]
647,Write a function to split a string at uppercase letters.,"import re
def split_upperstring(text):
 return (re.findall('[A-Z][^A-Z]*', text))","[""assert split_upperstring(\""PythonProgramLanguage\"")==['Python','Program','Language']"", ""assert split_upperstring(\""PythonProgram\"")==['Python','Program']"", ""assert split_upperstring(\""ProgrammingLanguage\"")==['Programming','Language']""]",,[]
804,Write a python function to check whether the product of numbers is even or not.,"def is_Product_Even(arr,n): 
    for i in range(0,n): 
        if ((arr[i] & 1) == 0): 
            return True
    return False","[""assert is_Product_Even([1,2,3],3) == True"", ""assert is_Product_Even([1,2,1,4],4) == True"", ""assert is_Product_Even([1,1],2) == False""]",,[]
665,Write a python function to shift first element to the end of given list.,"def move_last(num_list):
    a = [num_list[0] for i in range(num_list.count(num_list[0]))]
    x = [ i for i in num_list if i != num_list[0]]
    x.extend(a)
    return (x)","[""assert move_last([1,2,3,4]) == [2,3,4,1]"", ""assert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]"", ""assert move_last([5,4,3,2,1]) == [4,3,2,1,5]""]",,[]
832,Write a function to extract the maximum numeric value from a string by using regex.,"import re 
def extract_max(input): 
	numbers = re.findall('\d+',input) 
	numbers = map(int,numbers) 
	return max(numbers)","[""assert extract_max('100klh564abc365bg') == 564"", ""assert extract_max('hello300how546mer231') == 546"", ""assert extract_max('its233beenalong343journey234') == 343""]",,[]
681,Write a python function to find the smallest prime divisor of a number.,"def smallest_Divisor(n): 
    if (n % 2 == 0): 
        return 2; 
    i = 3;  
    while (i*i <= n): 
        if (n % i == 0): 
            return i; 
        i += 2; 
    return n; ","[""assert smallest_Divisor(10) == 2"", ""assert smallest_Divisor(25) == 5"", ""assert smallest_Divisor(31) == 31""]",,[]
856,Write a python function to find minimum adjacent swaps required to sort binary array.,"def find_Min_Swaps(arr,n) : 
    noOfZeroes = [0] * n 
    count = 0 
    noOfZeroes[n - 1] = 1 - arr[n - 1] 
    for i in range(n-2,-1,-1) : 
        noOfZeroes[i] = noOfZeroes[i + 1] 
        if (arr[i] == 0) : 
            noOfZeroes[i] = noOfZeroes[i] + 1
    for i in range(0,n) : 
        if (arr[i] == 1) : 
            count = count + noOfZeroes[i] 
    return count ","[""assert find_Min_Swaps([1,0,1,0],4) == 3"", ""assert find_Min_Swaps([0,1,0],3) == 1"", ""assert find_Min_Swaps([0,0,1,1,0],5) == 2""]",,[]
847,Write a python function to copy a list from a singleton tuple.,"def lcopy(xs):
  return xs[:]
","[""assert lcopy([1, 2, 3]) == [1, 2, 3]"", ""assert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]"", ""assert lcopy([4, 5, 6]) == [4, 5, 6]\n""]",,[]
701,Write a function to find the equilibrium index of the given array.,"def equilibrium_index(arr):
  total_sum = sum(arr)
  left_sum=0
  for i, num in enumerate(arr):
    total_sum -= num
    if left_sum == total_sum:
      return i
    left_sum += num
  return -1","[""assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3"", ""assert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3"", ""assert equilibrium_index([1, 2, 3]) == -1""]",,[]
853,Write a python function to find sum of odd factors of a number.,"import math
def sum_of_odd_Factors(n): 
    res = 1
    while n % 2 == 0: 
        n = n // 2 
    for i in range(3,int(math.sqrt(n) + 1)): 
        count = 0
        curr_sum = 1
        curr_term = 1
        while n % i == 0: 
            count+=1 
            n = n // i 
            curr_term *= i 
            curr_sum += curr_term    
        res *= curr_sum  
    if n >= 2: 
        res *= (1 + n) 
    return res ","[""assert sum_of_odd_Factors(30) == 24"", ""assert sum_of_odd_Factors(18) == 13"", ""assert sum_of_odd_Factors(2) == 1""]",,[]
870,Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.,"def sum_positivenum(nums):
  sum_positivenum = list(filter(lambda nums:nums>0,nums))
  return sum(sum_positivenum)","[""assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48"", ""assert sum_positivenum([10,15,-14,13,-18,12,-20])==50"", ""assert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522""]",,[]
951,Write a function to find the maximum of similar indices in two lists of tuples.,"def max_similar_indices(test_list1, test_list2):
  res = [(max(x[0], y[0]), max(x[1], y[1]))
   for x, y in zip(test_list1, test_list2)]
  return (res) ","[""assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]"", ""assert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]"", ""assert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]""]",,[]
625,Write a python function to interchange first and last elements in a given list.,"def swap_List(newList): 
    size = len(newList) 
    temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp   
    return newList ","[""assert swap_List([1,2,3]) == [3,2,1]"", ""assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]"", ""assert swap_List([4,5,6]) == [6,5,4]""]",,[]
745,Write a function to find numbers within a given range where every number is divisible by every digit it contains.,"def divisible_by_digits(startnum, endnum):
    return [n for n in range(startnum, endnum+1) \
                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]","[""assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"", ""assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]"", ""assert divisible_by_digits(20,25)==[22, 24]""]",,[]
627,Write a python function to find the smallest missing number from the given array.,"def find_First_Missing(array,start,end): 
    if (start > end): 
        return end + 1
    if (start != array[start]): 
        return start; 
    mid = int((start + end) / 2) 
    if (array[mid] == mid): 
        return find_First_Missing(array,mid+1,end) 
    return find_First_Missing(array,start,mid) ","[""assert find_First_Missing([0,1,2,3],0,3) == 4"", ""assert find_First_Missing([0,1,2,6,9],0,4) == 3"", ""assert find_First_Missing([2,3,5,8,9],0,4) == 0""]",,[]
943,Write a function to combine two given sorted lists using heapq module.,"from heapq import merge
def combine_lists(num1,num2):
  combine_lists=list(merge(num1, num2))
  return combine_lists","[""assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]"", ""assert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]"", ""assert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]""]",,[]
840,Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.,"def Check_Solution(a,b,c):  
    if b == 0:  
        return (""Yes"")  
    else: 
        return (""No"")  ","[""assert Check_Solution(2,0,-1) == \""Yes\"""", ""assert Check_Solution(1,-5,6) == \""No\"""", ""assert Check_Solution(2,0,2) == \""Yes\""""]",,[]
885,Write a python function to check whether the two given strings are isomorphic to each other or not.,"def is_Isomorphic(str1,str2):          
    dict_str1 = {}
    dict_str2 = {}
    for i, value in enumerate(str1):
        dict_str1[value] = dict_str1.get(value,[]) + [i]        
    for j, value in enumerate(str2):
        dict_str2[value] = dict_str2.get(value,[]) + [j]
    if sorted(dict_str1.values()) == sorted(dict_str2.values()):
        return True
    else:
        return False","[""assert is_Isomorphic(\""paper\"",\""title\"") == True"", ""assert is_Isomorphic(\""ab\"",\""ba\"") == True"", ""assert is_Isomorphic(\""ab\"",\""aa\"") == False""]",,[]
865,Write a function to print n-times a list using map function.,"def ntimes_list(nums,n):
    result = map(lambda x:n*x, nums) 
    return list(result)","[""assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]"", ""assert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]"", ""assert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]""]",,[]
818,Write a python function to count lower case letters in a given string.,"def lower_ctr(str):
      lower_ctr= 0
      for i in range(len(str)):
          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     
      return  lower_ctr","[""assert lower_ctr('abc') == 3"", ""assert lower_ctr('string') == 6"", ""assert lower_ctr('Python') == 5""]",,[]
850,Write a function to check if a triangle of positive area is possible with the given angles.,"def is_triangleexists(a,b,c): 
    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): 
        if((a + b)>= c or (b + c)>= a or (a + c)>= b): 
            return True 
        else:
            return False
    else:
        return False","[""assert is_triangleexists(50,60,70)==True"", ""assert is_triangleexists(90,45,45)==True"", ""assert is_triangleexists(150,30,70)==False""]",,[]
802,Write a python function to count the number of rotations required to generate a sorted array.,"def count_Rotation(arr,n):   
    for i in range (1,n): 
        if (arr[i] < arr[i - 1]): 
            return i  
    return 0","[""assert count_Rotation([3,2,1],3) == 1"", ""assert count_Rotation([4,5,1,2,3],5) == 2"", ""assert count_Rotation([7,8,9,1,2,3],6) == 3""]",,[]
657,Write a python function to find the first digit in factorial of a given number.,"import math 
def first_Digit(n) : 
    fact = 1
    for i in range(2,n + 1) : 
        fact = fact * i 
        while (fact % 10 == 0) :  
            fact = int(fact / 10) 
    while (fact >= 10) : 
        fact = int(fact / 10) 
    return math.floor(fact) ","[""assert first_Digit(5) == 1"", ""assert first_Digit(10) == 3"", ""assert first_Digit(7) == 5""]",,[]
769,Write a python function to get the difference between two lists.,"def Diff(li1,li2):
    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))
 ","[""assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]"", ""assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]"", ""assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]""]",,[]
620,Write a function to find the largest subset where each pair is divisible.,"def largest_subset(a, n):
	dp = [0 for i in range(n)]
	dp[n - 1] = 1; 
	for i in range(n - 2, -1, -1):
		mxm = 0;
		for j in range(i + 1, n):
			if a[j] % a[i] == 0 or a[i] % a[j] == 0:
				mxm = max(mxm, dp[j])
		dp[i] = 1 + mxm
	return max(dp)","[""assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4"", ""assert largest_subset([10, 5, 3, 15, 20], 5) == 3"", ""assert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4""]",,[]
931,Write a function to calculate the sum of series 1³+2³+3³+….+n³.,"import math 
def sum_series(number):
 total = 0
 total = math.pow((number * (number + 1)) /2, 2)
 return total","[""assert sum_series(7)==784"", ""assert sum_series(5)==225"", ""assert sum_series(15)==14400""]",,[]
784,Write a function to find the product of first even and odd number of a given list.,"def mul_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even*first_odd)","[""assert mul_even_odd([1,3,5,7,4,1,6,8])==4"", ""assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2"", ""assert mul_even_odd([1,5,7,9,10])==10""]",,[]
678,Write a python function to remove spaces from a given string.,"def remove_spaces(str1):
  str1 = str1.replace(' ','')
  return str1","[""assert remove_spaces(\""a b c\"") == \""abc\"""", ""assert remove_spaces(\""1 2 3\"") == \""123\"""", ""assert remove_spaces(\"" b c\"") == \""bc\""""]",,[]
751,Write a function to check if the given array represents min heap or not.,"def check_min_heap(arr, i):
    if 2 * i + 2 > len(arr):
        return True
    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)
    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] 
                                      and check_min_heap(arr, 2 * i + 2))
    return left_child and right_child","[""assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True"", ""assert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True"", ""assert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False""]",,[]
911,Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.,"def maximum_product(nums):
    import heapq
    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)
    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])","[""assert maximum_product( [12, 74, 9, 50, 61, 41])==225700"", ""assert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375"", ""assert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520""]",,[]
780,Write a function to find the combinations of sums with tuples in the given tuple list.,"from itertools import combinations 
def find_combinations(test_list):
  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]
  return (res) ","[""assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"", ""assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]"", ""assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]""]",,[]
899,Write a python function to check whether an array can be sorted or not by picking only the corner elements.,"def check(arr,n): 
    g = 0 
    for i in range(1,n): 
        if (arr[i] - arr[i - 1] > 0 and g == 1): 
            return False
        if (arr[i] - arr[i] < 0): 
            g = 1
    return True","[""assert check([3,2,1,2,3,4],6) == True"", ""assert check([2,1,4,5,1],5) == True"", ""assert check([1,2,2,1,2,3],6) == True""]",,[]
805,Write a function to find the list in a list of lists whose sum of elements is the highest.,"def max_sum_list(lists):
 return max(lists, key=sum)","[""assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] "", ""assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] "", ""assert max_sum_list([[2,3,1]])==[2,3,1] ""]",,[]
604,Write a function to reverse words in a given string.,"def reverse_words(s):
        return ' '.join(reversed(s.split()))","[""assert reverse_words(\""python program\"")==(\""program python\"")"", ""assert reverse_words(\""java language\"")==(\""language java\"")"", ""assert reverse_words(\""indian man\"")==(\""man indian\"")""]",,[]
830,Write a function to round up a number to specific digits.,"import math
def round_up(a, digits):
    n = 10**-digits
    return round(math.ceil(a / n) * n, digits)","[""assert round_up(123.01247,0)==124"", ""assert round_up(123.01247,1)==123.1"", ""assert round_up(123.01247,2)==123.02""]",,[]
944,Write a function to separate and print the numbers and their position of a given string.,"import re
def num_position(text):
 for m in re.finditer(""\d+"", text):
    return m.start()","[""assert num_position(\""there are 70 flats in this apartment\"")==10"", ""assert num_position(\""every adult have 32 teeth\"")==17"", ""assert num_position(\""isha has 79 chocolates in her bag\"")==9""]",,[]
894,Write a function to convert the given string of float type into tuple.,"def float_to_tuple(test_str):
  res = tuple(map(float, test_str.split(', ')))
  return (res) ","[""assert float_to_tuple(\""1.2, 1.3, 2.3, 2.4, 6.5\"") == (1.2, 1.3, 2.3, 2.4, 6.5)"", ""assert float_to_tuple(\""2.3, 2.4, 5.6, 5.4, 8.9\"") == (2.3, 2.4, 5.6, 5.4, 8.9)"", ""assert float_to_tuple(\""0.3, 0.5, 7.8, 9.4\"") == (0.3, 0.5, 7.8, 9.4)""]",,[]
811,Write a function to check if two lists of tuples are identical or not.,"def check_identical(test_list1, test_list2):
  res = test_list1 == test_list2
  return (res) ","[""assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True"", ""assert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False"", ""assert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True""]",,[]
836,Write a function to find length of the subarray having maximum sum.,"from sys import maxsize 
def max_sub_array_sum(a,size): 
	max_so_far = -maxsize - 1
	max_ending_here = 0
	start = 0
	end = 0
	s = 0
	for i in range(0,size): 
		max_ending_here += a[i] 
		if max_so_far < max_ending_here: 
			max_so_far = max_ending_here 
			start = s 
			end = i 
		if max_ending_here < 0: 
			max_ending_here = 0
			s = i+1
	return (end - start + 1)","[""assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5"", ""assert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2"", ""assert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3""]",,[]
