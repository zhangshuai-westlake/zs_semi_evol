task_id,question,answer,test_list,test_setup_code,challenge_test_list
744,Write a function to check if the given tuple has any none value or not.,"def check_none(test_tup):
  res = any(map(lambda ele: ele is None, test_tup))
  return (res) ","[""assert check_none((10, 4, 5, 6, None)) == True"", ""assert check_none((7, 8, 9, 11, 14)) == False"", ""assert check_none((1, 2, 3, 4, None)) == True""]",,[]
965,Write a function to convert camel case string to snake case string.,"def camel_to_snake(text):
        import re
        str1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)
        return re.sub('([a-z0-9])([A-Z])', r'\1_\2', str1).lower()","[""assert camel_to_snake('PythonProgram')==('python_program')"", ""assert camel_to_snake('pythonLanguage')==('python_language')"", ""assert camel_to_snake('ProgrammingLanguage')==('programming_language')""]",,[]
916,Write a function to find if there is a triplet in the array whose sum is equal to a given value.,"def find_triplet_array(A, arr_size, sum): 
	for i in range( 0, arr_size-2): 
		for j in range(i + 1, arr_size-1): 
			for k in range(j + 1, arr_size): 
				if A[i] + A[j] + A[k] == sum: 
					return  A[i],A[j],A[k] 
					return True
	return False","[""assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)"", ""assert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)"", ""assert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)""]",,[]
925,Write a python function to calculate the product of all the numbers of a given tuple.,"def mutiple_tuple(nums):
    temp = list(nums)
    product = 1 
    for x in temp:
        product *= x
    return product","[""assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864"", ""assert mutiple_tuple((1,2,3)) == 6"", ""assert mutiple_tuple((-2,-4,-6)) == -48""]",,[]
720,Write a function to add a dictionary to the tuple.,"def add_dict_to_tuple(test_tup, test_dict):
  test_tup = list(test_tup)
  test_tup.append(test_dict)
  test_tup = tuple(test_tup)
  return (test_tup) ","[""assert add_dict_to_tuple((4, 5, 6), {\""MSAM\"" : 1, \""is\"" : 2, \""best\"" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"", ""assert add_dict_to_tuple((1, 2, 3), {\""UTS\"" : 2, \""is\"" : 3, \""Worst\"" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})"", ""assert add_dict_to_tuple((8, 9, 10), {\""POS\"" : 3, \""is\"" : 4, \""Okay\"" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})""]",,[]
735,Write a python function to toggle bits of the number except the first and the last bit.,"def set_middle_bits(n):  
    n |= n >> 1; 
    n |= n >> 2; 
    n |= n >> 4; 
    n |= n >> 8; 
    n |= n >> 16;  
    return (n >> 1) ^ 1
def toggle_middle_bits(n): 
    if (n == 1): 
        return 1
    return n ^ set_middle_bits(n) ","[""assert toggle_middle_bits(9) == 15"", ""assert toggle_middle_bits(10) == 12"", ""assert toggle_middle_bits(11) == 13""]",,[]
767,Write a python function to count the number of pairs whose sum is equal to ‘sum’.,"def get_Pairs_Count(arr,n,sum):
    count = 0  
    for i in range(0,n):
        for j in range(i + 1,n):
            if arr[i] + arr[j] == sum:
                count += 1
    return count","[""assert get_Pairs_Count([1,1,1,1],4,2) == 6"", ""assert get_Pairs_Count([1,5,7,-1,5],5,6) == 3"", ""assert get_Pairs_Count([1,-2,3],3,1) == 1""]",,[]
806,Write a function to find maximum run of uppercase characters in the given string.,"def max_run_uppercase(test_str):
  cnt = 0
  res = 0
  for idx in range(0, len(test_str)):
    if test_str[idx].isupper():
      cnt += 1
    else:
      res = cnt
      cnt = 0
  if test_str[len(test_str) - 1].isupper():
    res = cnt
  return (res)","[""assert max_run_uppercase('GeMKSForGERksISBESt') == 5"", ""assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6"", ""assert max_run_uppercase('GooGLEFluTTER') == 4""]",,[]
766,Write a function to iterate over all pairs of consecutive items in a given list.,"def pair_wise(l1):
    temp = []
    for i in range(len(l1) - 1):
        current_element, next_element = l1[i], l1[i + 1]
        x = (current_element, next_element)
        temp.append(x)
    return temp","[""assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]"", ""assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]"", ""assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]""]",,[]
651,Write a function to check if one tuple is a subset of another tuple.,"def check_subset(test_tup1, test_tup2):
  res = set(test_tup2).issubset(test_tup1)
  return (res) ","[""assert check_subset((10, 4, 5, 6), (5, 10)) == True"", ""assert check_subset((1, 2, 3, 4), (5, 6)) == False"", ""assert check_subset((7, 8, 9, 10), (10, 8)) == True""]",,[]
659,Write a python function to print duplicants from a list of integers.,"def Repeat(x): 
    _size = len(x) 
    repeated = [] 
    for i in range(_size): 
        k = i + 1
        for j in range(k, _size): 
            if x[i] == x[j] and x[i] not in repeated: 
                repeated.append(x[i]) 
    return repeated ","[""assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]"", ""assert Repeat([-1, 1, -1, 8]) == [-1]"", ""assert Repeat([1, 2, 3, 1, 2,]) == [1, 2]""]",,[]
652,Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.,"def matrix_to_list(test_list):
  temp = [ele for sub in test_list for ele in sub]
  res = list(zip(*temp))
  return (str(res))","[""assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'"", ""assert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'"", ""assert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'""]",,[]
883,Write a function to find numbers divisible by m and n from a list of numbers using lambda function.,"def div_of_nums(nums,m,n):
 result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) 
 return result","[""assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]"", ""assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]"", ""assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]""]",,[]
973,Write a python function to left rotate the string.,"def left_rotate(s,d):
    tmp = s[d : ] + s[0 : d]
    return tmp  ","[""assert left_rotate(\""python\"",2) == \""thonpy\""   "", ""assert left_rotate(\""bigdata\"",3 ) == \""databig\"" "", ""assert left_rotate(\""hadoop\"",1 ) == \""adooph\"" ""]",,[]
654,Write a function to find the perimeter of a rectangle.,"def rectangle_perimeter(l,b):
  perimeter=2*(l+b)
  return perimeter","[""assert rectangle_perimeter(10,20)==60"", ""assert rectangle_perimeter(10,5)==30"", ""assert rectangle_perimeter(4,2)==12""]",,[]
748,Write a function to put spaces between words starting with capital letters in a given string by using regex.,"import re
def capital_words_spaces(str1):
  return re.sub(r""(\w)([A-Z])"", r""\1 \2"", str1)","[""assert capital_words_spaces(\""Python\"") == 'Python'"", ""assert capital_words_spaces(\""PythonProgrammingExamples\"") == 'Python Programming Examples'"", ""assert capital_words_spaces(\""GetReadyToBeCodingFreak\"") == 'Get Ready To Be Coding Freak'""]",,[]
733,Write a function to find the index of the first occurrence of a given number in a sorted array.,"def find_first_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            right = mid - 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result","[""assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1"", ""assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2"", ""assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4""]",,[]
794,"Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.","import re
def text_starta_endb(text):
        patterns = 'a.*?b$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return('Not matched!')","[""assert text_starta_endb(\""aabbbb\"")==('Found a match!')"", ""assert text_starta_endb(\""aabAbbbc\"")==('Not matched!')"", ""assert text_starta_endb(\""accddbbjjj\"")==('Not matched!')""]",,[]
905,Write a python function to find the sum of squares of binomial co-efficients.,"def factorial(start,end): 
    res = 1 
    for i in range(start,end + 1): 
        res *= i      
    return res 
def sum_of_square(n): 
   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) ","[""assert sum_of_square(4) == 70"", ""assert sum_of_square(5) == 252"", ""assert sum_of_square(2) == 6""]",,[]
609,Write a python function to find minimum possible value for the given periodic function.,"def floor_Min(A,B,N):
    x = max(B - 1,N)
    return (A*x) // B","[""assert floor_Min(10,20,30) == 15"", ""assert floor_Min(1,2,1) == 0"", ""assert floor_Min(11,10,9) == 9""]",,[]
