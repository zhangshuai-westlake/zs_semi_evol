task_id,question,answer,test_list,test_setup_code,challenge_test_list
484,Write a function to remove the matching tuples from the given two tuples.,"def remove_matching_tuple(test_list1, test_list2):
  res = [sub for sub in test_list1 if sub not in test_list2]
  return (res) ","[""assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]"", ""assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]"", ""assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]""]",,[]
143,Write a function to find number of lists present in the given tuple.,"def find_lists(Input): 
	if isinstance(Input, list): 
		return 1
	else: 
		return len(Input) ","[""assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2"", ""assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3"", ""assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1""]",,[]
483,Write a python function to find the first natural number whose factorial is divisible by x.,"def first_Factorial_Divisible_Number(x): 
    i = 1;
    fact = 1; 
    for i in range(1,x): 
        fact = fact * i 
        if (fact % x == 0): 
            break
    return i ","[""assert first_Factorial_Divisible_Number(10) == 5"", ""assert first_Factorial_Divisible_Number(15) == 5"", ""assert first_Factorial_Divisible_Number(5) == 4""]",,[]
57,Write a python function to find the largest number that can be formed with the given digits.,"def find_Max_Num(arr,n) : 
    arr.sort(reverse = True) 
    num = arr[0] 
    for i in range(1,n) : 
        num = num * 10 + arr[i] 
    return num ","[""assert find_Max_Num([1,2,3],3) == 321"", ""assert find_Max_Num([4,5,6,1],4) == 6541"", ""assert find_Max_Num([1,2,3,9],4) == 9321""]",,[]
51,Write a function to print check if the triangle is equilateral or not.,"def check_equilateral(x,y,z):
  if x == y == z:
	   return True
  else:
     return False","[""assert check_equilateral(6,8,12)==False "", ""assert check_equilateral(6,6,12)==False"", ""assert check_equilateral(6,6,6)==True""]",,[]
243,Write a function to sort the given list based on the occurrence of first element of tuples.,"def sort_on_occurence(lst): 
	dct = {} 
	for i, j in lst: 
		dct.setdefault(i, []).append(j) 
	return ([(i, *dict.fromkeys(j), len(j)) 
				for i, j in dct.items()]) ","[""assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]"", ""assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]"", ""assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]""]",,[]
56,Write a python function to check if a given number is one less than twice its reverse.,"def rev(num):    
    rev_num = 0
    while (num > 0):  
        rev_num = (rev_num * 10 + num % 10) 
        num = num // 10  
    return rev_num  
def check(n):    
    return (2 * rev(n) == n + 1)  ","[""assert check(70) == False"", ""assert check(23) == False"", ""assert check(73) == True""]",,[]
439,Write a function to convert a list of multiple integers into a single integer.,"def multiple_to_single(L):
  x = int("""".join(map(str, L)))
  return x","[""assert multiple_to_single([11, 33, 50])==113350"", ""assert multiple_to_single([-1,2,3,4,5,6])==-123456"", ""assert multiple_to_single([10,15,20,25])==10152025""]",,[]
337,"Write a function that matches a word at the end of a string, with optional punctuation.","import re
def text_match_word(text):
        patterns = '\w+\S*$'
        if re.search(patterns,  text):
                return 'Found a match!'
        else:
                return 'Not matched!'","[""assert text_match_word(\""python.\"")==('Found a match!')"", ""assert text_match_word(\""python.\"")==('Found a match!')"", ""assert text_match_word(\""  lang  .\"")==('Not matched!')""]",,[]
170,Write a function to find sum of the numbers in a list between the indices of a specified range.,"def sum_range_list(list1, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += list1[i]                                                                                                                                                                                                  
    return sum_range   ","[""assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29"", ""assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16"", ""assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38""]",,[]
302,Write a python function to find the most significant bit number which is also a set bit.,"def set_Bit_Number(n): 
    if (n == 0): 
        return 0; 
    msb = 0; 
    n = int(n / 2); 
    while (n > 0): 
        n = int(n / 2); 
        msb += 1; 
    return (1 << msb)","[""assert set_Bit_Number(6) == 4"", ""assert set_Bit_Number(10) == 8"", ""assert set_Bit_Number(18) == 16""]",,[]
246,Write a function for computing square roots using the babylonian method.,"def babylonian_squareroot(number):
    if(number == 0):
        return 0;
    g = number/2.0;
    g2 = g + 1;
    while(g != g2):
        n = number/ g;
        g2 = g;
        g = (g + n)/2;
    return g;","[""assert babylonian_squareroot(10)==3.162277660168379"", ""assert babylonian_squareroot(2)==1.414213562373095"", ""assert babylonian_squareroot(9)==3.0""]",,[]
464,Write a function to check if all values are same in a dictionary.,"def check_value(dict, n):
    result = all(x == n for x in dict.values()) 
    return result","[""assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False"", ""assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True"", ""assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False""]",,[]
118,[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.,"def string_to_list(string): 
    lst = list(string.split("" "")) 
    return lst","[""assert string_to_list(\""python programming\"")==['python','programming']"", ""assert string_to_list(\""lists tuples strings\"")==['lists','tuples','strings']"", ""assert string_to_list(\""write a program\"")==['write','a','program']""]",,[]
378,Write a python function to shift last element to first position in the given list.,"def move_first(test_list):
  test_list = test_list[-1:] + test_list[:-1]  
  return test_list","[""assert move_first([1,2,3,4]) == [4,1,2,3]"", ""assert move_first([0,1,2,3]) == [3,0,1,2]"", ""assert move_first([9,8,7,1]) == [1,9,8,7]""]",,[]
126,Write a python function to find the sum of common divisors of two given numbers.,"def sum(a,b): 
    sum = 0
    for i in range (1,min(a,b)): 
        if (a % i == 0 and b % i == 0): 
            sum += i 
    return sum","[""assert sum(10,15) == 6"", ""assert sum(100,150) == 93"", ""assert sum(4,6) == 3""]",,[]
291,Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.,"def count_no_of_ways(n, k): 
	dp = [0] * (n + 1) 
	total = k 
	mod = 1000000007
	dp[1] = k 
	dp[2] = k * k	 
	for i in range(3,n+1): 
		dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod 
	return dp[n]","[""assert count_no_of_ways(2, 4) == 16"", ""assert count_no_of_ways(3, 2) == 6"", ""assert count_no_of_ways(4, 4) == 228""]",,[]
368,Write a function to repeat the given tuple n times.,"def repeat_tuples(test_tup, N):
  res = ((test_tup, ) * N)
  return (res) ","[""assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))"", ""assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))"", ""assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))""]",,[]
196,Write a function to remove all the tuples with length k.,"def remove_tuples(test_list, K):
  res = [ele for ele in test_list if len(ele) != K]
  return (res) ","[""assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]"", ""assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]"", ""assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]""]",,[]
338,Write a python function to count the number of substrings with same first and last characters.,"def check_Equality(s): 
    return (ord(s[0]) == ord(s[len(s) - 1])); 
def count_Substring_With_Equal_Ends(s): 
    result = 0; 
    n = len(s); 
    for i in range(n):
        for j in range(1,n-i+1): 
            if (check_Equality(s[i:i+j])): 
                result+=1; 
    return result; ","[""assert count_Substring_With_Equal_Ends('aba') == 4"", ""assert count_Substring_With_Equal_Ends('abcab') == 7"", ""assert count_Substring_With_Equal_Ends('abc') == 3""]",,[]
